<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"><html xmlns="http://www.w3.org/1999/xhtml"><head>    <meta name="generator"          content="HTML Tidy for Windows (vers 25 March 2009), see www.w3.org" />    <meta content="text/html; charset=us-ascii"          http-equiv="content-type" />    <title>ElectricFlow Plugin for Brakeman</title>    <link rel="stylesheet"          href="../../plugins/@PLUGIN_KEY@/pluginhelp.css"          type="text/css"          media="screen" /></head><body>    <div class="help">        <h1>Brakeman</h1>        <p>Plugin Version @PLUGIN_VERSION@</p>        <hr style="margin-left: -10px; margin-top: 10px; height: 1px; width: 100%; #5981BD;"            noshade="noshade" />        <!-- The tool description should answer these kinds of questions:5981BD What is the tool itself is used for in the development process? Who would use this tool? What is the general use-case or problem that this tool solves? Look at the tool's documentation or website(s) to get their own descriptions. Look at Wikipedia or other outside websites. If there is a Hudson plugin, read their documentation for ideas, examples, etc. It's OK to copy word-for-word only if appropriate, such as FOSS - but not commercial software. -->        <p>Brakeman is an open source vulnerability scanner        specifically designed for Ruby on Rails applications. It        statically analyzes Rails application code to find security        issues at any stage of development. It's used through        console and generates detailed reports of all security        issues found. Between Brakeman advantages stand:</p>        <ul>            <li>Brakeman requires zero setup or configuration once            it is installed.</li>            <li>Brakeman can be run at any stage of development            because all it needs is source code: it's possible to            generate a new application with rails and check it            immediately with Brakeman.</li>            <li>Brakeman is a Ruby gem, that makes it            cross-platform.</li>            <li>Is a tool simple to use, that can generate fancy            reports in several formats.</li>            <li>Command line calls are available.</li>            <li>Rich output to apply postp analysis.</li>            <li>Maybe Brakeman is not remarkably fast, but it is            much faster than "black box" website scanners, even            large applications should not consume more than a few            minutes to scan.</li>        </ul>        <h2>Brakeman Links</h2>        <p>More information can be found at:</p>        <ul>            <li><a href="http://brakemanscanner.org/">Official            Brakeman Page</a></li>            <li><a href="http://brakemanscanner.org/docs/">Brakeman            Documentation</a></li>        </ul>        <h2>ElectricFlow Integration to Brakeman</h2>        <!-- The integration description should answer the questions: How deep does our integration go? Why should I care? What general functionality does the plugin include? What functionality does the plugin omit? -->        <p>@PLUGIN_KEY@ plugin calls the Brakeman functions via        command line and passes the user-provided parameters.</p>        <p>The @PLUGIN_KEY@ plugin is open, it allows the input of        any Brakeman command, defined in the provided fields of the        parameters. Is important to provide all the parameters        required for the correct functioning of the plugin.</p>        <p>ElectricFlow itself provides some advantages like        parameters checking, easy functionality selection using        only check boxes or radio buttons, hitorical log reports,        procedure duration statistics, simple credentials        attachment, real time analysis of the log been generated,        among others.</p>        <h2>Integrated Version</h2>        <p>This plugin was developed and tested against Brakeman        version 1.7.0</p>        <h1>Plugin Procedures</h1>        <p>IMPORTANT: For all parameter descriptions below,        required parameters are shown in        <span class='required'>bold italics</span>.</p>        <div id="runREST">            <a name='runREST'                 id="runREST"></a>             <h3>Run Brakeman</h3>            <p>This procedure analyzes a Rails application code to            find security issues, and depending on the provided            parameters generates reports of all security issues            found.</p>            <p>Some of the Fields are not required for all types of            requests, however, the "required "specified fields            cannot be omited.</p>            <!-- If the plugin has separate configurations then include this section, otherwise omit this whole section. We don't need to have a configuration section that just says "There is no configuration for this plugin." -->            <table class="grid">                <thead>                    <tr>                        <th>Parameter</th>                        <th>Description</th>                    </tr>                </thead>                <tbody>                    <tr>                        <td class='required'>Application Path</td>                        <td>Specifies the local path to the Ruby                        application to analyze. (Required)</td>                    </tr>                    <tr>                        <td>Report File</td>                        <td>To specify an output file for the                        results, current options are: text, html,                        tabs, and csv.</td>                    </tr>                    <tr>                        <td class='required'>Verbosity</td>                        <td>To suppress informational warnings and                        just output the report by selecting 'Quiet                        Operation', and to see all kinds of                        debugging information select 'Debug'.                        (Required)</td>                    </tr>                    <tr>                        <td>Ignore model output</td>                        <td>By default brakeman will report                        unescaped model attributes as dangerous, to                        disregard these warnings check this                        option.</td>                    </tr>                    <tr>                        <td>Confidence level</td>                        <td>This rating is intended to indicate how                        certain Brakeman is that the given warning                        is a real problem. There are three levels                        of confidence: Weak (1), Medium (2) and                        High (3).</td>                    </tr>                    <tr>                        <td>Additional Options</td>                        <td>Specifies any additional options either                        scanning or warning options, e.g. --path or                        --routes option among others.</td>                    </tr>                </tbody>            </table>            <!-- For all parameters, the parameter name should be *exactly* the same as it appears in the Parameter Panel, and the first sentence(s) of the description should be the same as the tooltip (if there is one). After that, the parameter description can go into greater detail about the parameter including valid value ranges and examples. -->            <img src="../../plugins/@PLUGIN_KEY@/images/parameter_form.png"                 alt="screenshot" />        </div>        <h1>Use Cases and Examples</h1>        <!-- This section is for examples and use cases, including screenshots of the new Parameter Panel with example values filled in. Unfortunately, I can't tell you what exactly to put here, but it's OK to put what seems like too much! Include both parameter values and output where appropriate. Use a separate 'h2' header for each example. Under the h2 header try to stay with the style outline used above where possible. -->        <h2>Example 1: Run Brakeman and generate a HTML report</h2>        <!--p>Provision and cleanup work as a pair within a job.</p-->        <p>One of the most common uses for this plugin is to        perform an analysis and generate a report in a external        file, such as a text or HTML file. Before executing the        analysis, it is necesary to have a Ruby on Rails        application, for this example I created one with the basic        elements, just by typing in the terminal:        <span class='bold'>rails new C:\\app</span></p>        <p>Once the user provide the information required, the        plugin creates the command, sends it to the application and        wait for the response. The response, is notified to the        user. Create a Brakeman command by specifying the        parameters:</p><img alt=""             src="../../plugins/@PLUGIN_KEY@/images/example_1.png" />                     <p>Once the parameters are set, now you are able to execute        the step and see the results. The red arrow points the link        to the generated report, HTML in this case.</p><img alt=""             src="../../plugins/@PLUGIN_KEY@/images/example_1_2.png" />                     <h4>Results and outputs</h4>        <p>Once the job finished, you can see the Brakeman        response:<br />         <img alt=""             src="../../plugins/@PLUGIN_KEY@/images/example_1_3.png" />             <img alt=""             src="../../plugins/@PLUGIN_KEY@/images/example_1_4.png" /></p>        <p>Finally, the generated HTML report should look similar        to this one:<br />         <img alt=""             src="../../plugins/@PLUGIN_KEY@/images/example_1_5.png" /></p>        <h1>Release Notes</h1>        <h2>EC-Brakeman-1.0.0</h2>        <ul>            <li>Procedure: runBrakeman.</li>            <li>Implemented XML parameter panel</li>            <li>Created help page.</li>            <li>Create detailed example.</li>            <li>Postp implementation.</li>        </ul>    </div></body></html>